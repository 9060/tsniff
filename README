ABOUT
=====

tsniff は shell script や MythTV などのフロントエンドに対して、
ハードウェア制御やパフォーマンスクリティカルな処理を行うバックエンドとして
利用することを想定しています。

tsniff そのものに予約などの高度な機能を追加する予定は **全くありません** 。


INSTALL
=======

Install from release
--------------------

 $ tar zxvf tsniff-0.1.0.tar.gz
 $ cd tsniff-0.1.0
 $ ./configure
 $ make
 $ sudo make install

Install from development repository
-----------------------------------

最新版の libusb-1.0 を入手し、bootstrap を実行します。
 $ cd extra
 $ git clone http://libusb-1.0 libusb-1.0
 $ ( cd libusb-1.0 && ./autogen.sh )
最新版の arib_std_b25-atty を入手し、bootstrap を実行します。
 $ hg clone http://atty.skr.jp/hg/arib_std_b25-atty b25
 $ ( cd b25 && ./autogen.sh )
tsniff の bootstrap を実行し、make します。
 $ cd ..
 $ ./autogen.sh
 $ mkdir build; cd build
 $ ../configure
 $ make


USAGE
=====


OPTIONS
=======

入出力の指定
------------

FILENAME には標準入力または標準出力として、"-" を指定することが可能です。

  -T, --ts-input=SOURCE
      TS データ入力を SOURCE に設定します。SOURCE は以下の値を取ります。
      省略時のデフォルトは fx2: です。

        fx2:     - CUSBFX2 から TS を取得します。
        FILENAME - ファイルから TS を取得します。

  -B, --bcas-input SOURCE
      B-CAS データ入力を SOURCE に設定します。SOURCE は以下の値を取ります。
      省略時のデフォルトは fx2: です。

        fx2:     - CUSBFX2 から B-CAS データを取得します。
        pcsc:    - libpcsclite 経由でカードリーダから B-CAS データを取得します。
                   --bcas-output, --verify-bcas-stream との併用はできません。
        FILENAME - ファイルから B-CAS データを取得します。
                   初期化の際に全ての B-CAS データを取得します。

  -t, --ts-output=FILENAME
      未加工 TS データを FILENAME へ出力します。

  -b, --bcas-output=FILENAME
      B-CAS データを FILENAME へ出力します。

  -o, --b25-output=FILENAME
      ARIB STD-B25 デコーダを有効にし、デコード済み TS データを FILENAME へ出力します。

ファイルからの入力と CUSBFX2 からの入力を同時に指定した場合はマトモに動作しません。


B-CAS 初期データ
----------------

--b25-output を指定し、かつ B-CAS データ入力に "fx2:" またはファイルを使用する場合は、
B-CAS 初期データ(システム鍵・初期 CBC)を別途指定する必要があります。
これは、カードリーダがなければ B-CAS 初期データを取得できないことからくる制限事項です。

B-CAS 初期データは、オプションで指定するか、設定ファイルに書いておきます。

 $ tsniff -o foo.ts \
     --b25-system-key=00112233445566778899AABBCCDDEEFF00112233445566778899aabbccddeeff \
     --b25-init-cbc=0011223344556677

 tsniff.conf ::
   [b25]
   system_key = 00112233445566778899AABBCCDDEEFF00112233445566778899aabbccddeeff
   init_cbc = 0011223344556677

なお、B-CAS 初期データは --dump-bcas-init-status で取得できます。
そのまま設定ファイルとして利用するのが良いでしょう。

 $ tsniff --dump-bcas-init-status >$HOME/.config/tsniff.conf

その他
------

  --verify-bcas-stream
      B-CAS データの検証のみを行います。

        $ tsniff --verify-bcas-stream -B foo.bcs    # 検証
        $ tsniff --verify-bcas-stream -B fx2:       # ストレステスト

      検証エラーが発生した場合は、B-CAS データの転送に失敗しています。
      配線の見直しやバッファサイズの調整を行ってください。


入出力の指定例
--------------

 # CUSBFX2 から B25 デコード済みの TS を foo.ts へ出力
 $ tsniff -o foo.ts
       Inputs      |             |   Outputs
    ===============|=============|===========
     CUSBFX2:TS  --|--+          |
                   |  |          |
                   |  +--> B25 --|--> foo.ts
                   |  |          |
    CUSBFX2:BCAS --|--+          |

 # CUSBFX2 から生 TS を foo.ets へ、B-CAS データを foo.bcs へ出力
 $ tsniff -T fx2: -B fx2: -t foo.ets -b foo.bcs
       Inputs      |             |   Outputs
    ===============|=============|===========
     CUSBFX2:TS  --|-------------|--> foo.ets
                   |             |
                   |       B25   |
                   |             |
    CUSBFX2:BCAS --|-------------|--> foo.bcs

 # CUSBFX2 から生 TS を foo.ets へ、B-CAS データを foo.bcs へ、B25 デコード済み TS を foo.ts へ出力
 $ tsniff -t foo.ets -b foo.bcs -o foo.ts
       Inputs      |             |   Outputs
    ===============|=============|===========
     CUSBFX2:TS  --|--+----------|--> foo.ets
                   |  |          |
                   |  +--> B25 --|--> foo.ts
                   |  |          |
    CUSBFX2:BCAS --|--+----------|--> foo.bcs

 # CUSBFX2 から生 TS を foo.ets へ、B-CAS カードリーダーを利用して B25 デコード済み TS を foo.ts へ出力
 $ tsniff -B pcsc: -t foo.ets -o foo.ts
       Inputs      |             |   Outputs
    ===============|=============|===========
     CUSBFX2:TS  --|--+----------|--> foo.ets
                   |  |          |
                   |  +--> B25 --|--> foo.ts
                   |  |          |
      PCSC:BCAS  --|--+          |

 # 保存済みの生 TS foo.ets と B-CAS データ foo.bcs から、B25 デコード済み TS を foo.ts へ出力
 $ tsniff -T foo.ets -B foo.bcs -o foo.ts
       Inputs      |             |   Outputs
    ===============|=============|===========
      foo.ets    --|--+          |
                   |  |          |
                   |  +--> B25 --|--> foo.ts
                   |  |          |
      foo.bcs    --|--+          |

 # 保存済みの生 TS foo.ets から、B-CAS カードリーダーを利用して B25 デコード済み TS を foo.ts へ出力
 $ tsniff -T foo.ets -B pcsc: -o foo.ts
       Inputs      |             |   Outputs
    ===============|=============|===========
      foo.ets    --|--+          |
                   |  |          |
                   |  +--> B25 --|--> foo.ts
                   |  |          |
      PCSC:BCAS  --|--+          |

 # 意味なし
 $ tsniff -t - -o foo.ts | tsniff -T - -B pcsc: -t foo.ets -o bar.ts
       Inputs      |             |   Outputs  ||    Inputs      |             |   Outputs
    ===============|=============|=========== || ===============|=============|===========
     CUSBFX2:TS  --|--+----------|--> STDOUT -||->  STDIN:TS  --|--+----------|--> foo.ets
                   |  |          |            ||                |  |          |
                   |  +--> B25 --|--> foo.ts  ||                |  +--> B25 --|--> bar.ts
                   |  |          |            ||                |  |          |
    CUSBFX2:BCAS --|--+          |            ||   PCSC:BCAS  --|--+          |


FILES
=====

 $HOME/.config/tsniff.conf ::
   設定ファイル


TODO
====

 * ECM鍵到着と利用の時間差を計測して表示
 * 時間ベースのTS遅延バッファサイズ指定
 * 終了時の各種バッファのフラッシュ
 * 終了時の各種バッファとインスタンスの解放
 * B-CAS 初期データをダンプする
 * ログをファイルに出力
 * 最初のECM鍵が到着するまでTSをsniffしない? その場合は無効区間をログ出力
 * 末尾のECMエラーの回避
 * VLCの input module
 * mplayerの input module
 * EP4INのパケットサイズを可変にする(ファームウェアのパッチ当て)
   * 変更後は、EP4INのパケットサイズをディスクリプタから読んで設定する
 * 使わないけど、なんとなくMacOSXに移植してみる(USB周りだけでいけるはず)
 * 万が一にも気が向けばWindowsに移植してみる
 * Friio対応(実機がない)
   * cap_sts式のほうが機能・運用・コストどれを取ってもメリットが大きいので、あまりやる気なし
 * TSの処理(どこまでやるか?)
